#!/usr/bin/env bash
set -e

lang="$1"
option="$2"

if [ -z "$lang" ]; then
  echo "Usage: $0 <python|node> [--multi-stage]"
  exit 1
fi

# Check if Dockerfile already exists
if [ -f "./Dockerfile" ]; then
  echo "⚠️  Dockerfile already exists in the current directory. Aborting."
  exit 1
fi

# Initialize based on language
# https://devopscube.com/create-dockerfile-using-docker-init/
# https://devopscube.com/slimtoolkit-to-shrink-docker-images/
case "$lang" in
  # https://github.com/dockersamples/docker-init-demos/tree/main/python
  python)
    version=$(python -V | awk '{split($2,a,"."); print a[1]"."a[2]}')
    cat >Dockerfile <<EOF
# Autogenerated Python Dockerfile

ARG PYTHON_VERSION=${version}
FROM python:\${PYTHON_VERSION}-slim as base

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

ARG UID=10001
RUN adduser \\
    --disabled-password \\
    --gecos "" \\
    --home "/nonexistent" \\
    --shell "/sbin/nologin" \\
    --no-create-home \\
    --uid "\${UID}" \\
    appuser

# Install dependencies
# Uses BuildKit cache if available, falls back to regular install
# CI pipelines (with BuildKit caching):
# DOCKER_BUILDKIT=1 docker build -t myapp .
RUN --mount=type=cache,target=/root/.cache/pip \\
    --mount=type=bind,source=requirements.txt,target=requirements.txt \\
    pip install --no-cache-dir -r requirements.txt

USER appuser

COPY . .

EXPOSE 8000

CMD ["python", "main.py"]
EOF
    ;;
  # https://github.com/dockersamples/docker-init-demos/tree/main/node
  node)
    version=$(node --version | sed 's/^v//' | cut -d. -f1)
    if [ "$option" = "--multi-stage" ]; then
      cat >Dockerfile <<EOF
# Autogenerated Multi Stage Node Dockerfile

###############
# Build Stage #
###############
ARG NODE_VERSION=${version}
FROM node:\${NODE_VERSION}-alpine as build

ENV NODE_OPTIONS="--max-old-space-size=768"
ENV NODE_ENV production

WORKDIR /app

COPY package*.json ./

RUN npm ci --omit=dev,optional

COPY . .

RUN npm run build

####################
# Production Stage #
####################
FROM nginx:stable-alpine AS production

COPY --from=build /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
EOF
    else
      cat >Dockerfile <<EOF
# Autogenerated Node Dockerfile

ARG NODE_VERSION=${version}
FROM node:\${NODE_VERSION}-slim as base

ENV NODE_ENV production

WORKDIR /app

COPY package*.json ./

RUN npm ci --include=optional

USER node

COPY . .

EXPOSE 8080

CMD ["node", "index.js"]
EOF
    fi
    ;;
  *)
    echo "Unsupported language: $lang"
    exit 1
    ;;
esac

echo "✅ Dockerfile initialized for $lang"

# File paths
DOCKERIGNORE_FILE=".dockerignore"
GITIGNORE_FILE=".gitignore"

# Start fresh
echo "# Autogenerated .dockerignore" >$DOCKERIGNORE_FILE
echo "# Generated from .gitignore plus Docker-specific rules" >>$DOCKERIGNORE_FILE
echo "" >>$DOCKERIGNORE_FILE

# Include existing .gitignore if present
if [ -f "$GITIGNORE_FILE" ]; then
  echo "# Patterns from .gitignore" >>$DOCKERIGNORE_FILE
  grep -v '^#' "$GITIGNORE_FILE" | grep -v '^\s*$' >>$DOCKERIGNORE_FILE
  echo "" >>$DOCKERIGNORE_FILE
fi

# Add Docker-specific ignores
cat >>$DOCKERIGNORE_FILE <<'EOF'
# Docker-specific ignores
*.md
Dockerfile
*compose.yaml
*compose.yml
.dockerignore
.git
.github
.gitlab-ci
.gitlab-ci.yml
EOF

echo "✅ .dockerignore generated"
